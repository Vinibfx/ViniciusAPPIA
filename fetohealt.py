# -*- coding: utf-8 -*-
"""FetoHEALT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eVFUS-BbXxr_iB8p5aIlbYaSEB-2qliG
"""

import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import pandas as pd
import numpy as np
data=pd.read_csv('/content/fetal_health.csv')
data.head()

data.info()

data=data.drop_duplicates()
data.info()

data.describe()

from sklearn.preprocessing import LabelEncoder
enc=LabelEncoder()
data['fetal_health']=enc.fit_transform(data['fetal_health'])

data['fetal_health'].value_counts()
y=data['fetal_health']
x=data.drop(['fetal_health'],axis=1)

for column in x.columns:
    x[column] = (x[column] - x[column].min()) / (x[column].max() - x[column].min()) 
x.head()

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest= train_test_split(x,y,test_size=0.1,stratify=y)
print(xtrain.shape)
print(xtest.shape)
print(ytrain.shape)
print(ytest.shape)

from sklearn.svm import SVC
svm_model= SVC(kernel='rbf',gamma=8)
svm_model.fit(xtrain,ytrain)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
predictions= svm_model.predict(xtrain)
percentage=svm_model.score(xtrain,ytrain)
res=confusion_matrix(ytrain,predictions)
print("Training confusion matrix")
print(res)
predictions= svm_model.predict(xtest)
percentage=svm_model.score(xtest,ytest)
res=confusion_matrix(ytest,predictions)
print("validation confusion matrix")
print(res)
print(classification_report(ytest, predictions))
# check the accuracy on the training set
print('training accuracy = '+str(svm_model.score(xtrain, ytrain)*100))
print('testing accuracy = '+str(svm_model.score(xtest, ytest)*100))

from xgboost import XGBClassifier
svm_model=XGBClassifier()
svm_model.fit(xtrain,ytrain)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
predictions= svm_model.predict(xtrain)
percentage=svm_model.score(xtrain,ytrain)
res=confusion_matrix(ytrain,predictions)
print("Training confusion matrix")
print(res)
predictions= svm_model.predict(xtest)
percentage=svm_model.score(xtest,ytest)
res=confusion_matrix(ytest,predictions)
print("validation confusion matrix")
print(res)
print(classification_report(ytest, predictions))
# check the accuracy on the training set
print('training accuracy = '+str(svm_model.score(xtrain, ytrain)*100))
print('testing accuracy = '+str(svm_model.score(xtest, ytest)*100))