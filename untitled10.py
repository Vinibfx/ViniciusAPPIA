# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z4jaQZ7fa2x82MvXJls0J680I2xk3or7

Obtenção dos dados
Neste projeto serão utilizados dados públicos disponibilizados no Kaggle: Fetal Health Classification. Estas informações são baseadas em um trabalho acadêmico que reuniu mais de 2 mil resultados de exames de Cardiotocografia em que foram classificadas a saúde de cada feto por três especialistas em obstetrícia. A classificação dada para a saúde de cada feto está dentro das seguintes classes:

Normal, assinalado como 1.
Suspeito, assinalado como 2.
Patológico, assinalado como 3.
"""

# Commented out IPython magic to ensure Python compatibility.
#importando as bibliotecas padrão que serão usados no projeto
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import seaborn as sns

#endereco dos dados
endereco = ('/content/fetal_health.csv')

#lendo o csv com a biblioteca pandas
df = pd.read_csv(endereco)

#mostrando as 5 primeiras entradas
df.head()

#Visualizando o nome de todas as colunas do dataset
df.columns

#Avaliando a quantidade de todos os valores da base de dados
print('Esta base de dados contém:')
print('{:,} entradas'.format(df.shape[0]).replace(',','.'))
print('{} variáveis'.format(df.shape[1]))

#Criando uma tabela dos tipos de dados
pd.DataFrame(df.dtypes,columns=['Tipo de Dados'])

"""O objetivo desta análise é conseguir classificar a saúde dos fetos a partir das outras variáveis medidas pelos exames de Cardiotocografia. Portanto a coluna fetal_health é considerada nossa variável alvo, ou seja, a variável que queremos prever."""

np.unique(df.fetal_health)

#iniciando a variável alvo em zero
df['fetal_health'] = df['fetal_health'].replace([1.,2.,3.],[0,1,2])

#conferindo a mudança
np.unique(df.fetal_health)

#Criando uma tabela dos valores vazios
pd.DataFrame(df.isnull().sum(),columns=['Quantidade de Valores Vazios'])

#setando as variáveis que serão usadas na matriz do ax
i=0
j=0

#definindo a funcao de ajustes nos layouts dos histogramas
def ajustes_layout(histogramas):
  for i in range(6):
    for j in range(4):
      histogramas[i][j].set_frame_on(False)
      histogramas[i][j].tick_params(axis='both',length=0,colors='grey')
      histogramas[i][j].grid(linestyle='-.',lw=0.15,aa=True)

df.describe().round(2)

matriz_de_correlacao = df.corr()

mascara = np.zeros_like(matriz_de_correlacao)
mascara[np.triu_indices_from(mascara)] = True

#plotando o gráfico de correlação
with sns.axes_style('white'):
  fig,ax = plt.subplots(figsize=(16,12))
  sns.heatmap(matriz_de_correlacao,mask=mascara,square=True,annot=True,cmap='Blues',fmt='.1f',linewidths=3,ax=ax)
  ax.set_title('Matriz de Correlação das variavéis numéricas',loc='left',pad=10,fontdict={'fontsize':20},color='#666666')

#criando o fig e o ax no matplotlib
fig, ax = plt.subplots(figsize=(8,6))

#criando o gráfico de barras
df.fetal_health.value_counts().plot.bar(ax=ax,color='#281E5D',alpha=0.8)

#adicionando os rótulos
addlabels_layout(x=df.fetal_health.unique(),y=df.fetal_health.value_counts())

#plotando o gráfico
plt.tight_layout();

#Porcentagens de cada saúde fetal
normal = (df[df.fetal_health == 0].shape[0])/(df.shape[0])*100
suspeito = (df[df.fetal_health == 1].shape[0])/(df.shape[0])*100
patologico = (df[df.fetal_health == 2].shape[0])/(df.shape[0])*100

print('Porcentagem de fetos considerados normais: {:.1f} %'.format(normal))
print('Porcentagem de fetos considerados suspeitos: {:.1f} %'.format(suspeito))
print('Porcentagem de fetos considerados patológicos: {:.1f} %'.format(patologico))

#melhorando o layout do boxplot
def melhorando_layout(numero_do_grafico):
  ax[numero_do_grafico].grid(linestyle='--',lw=0.25,aa=True)
  ax[numero_do_grafico].set_frame_on(False)
  ax[numero_do_grafico].tick_params(axis='both',length=0,colors='grey')
  ax[numero_do_grafico].set_xticklabels(['Normal','Suspeito','Patológico'],fontdict={'fontsize':12},color='#6a6a6f',rotation=0)

#criando o ax e o fig no matplotlib
fig,ax = plt.subplots(figsize=(12,8),ncols=2,dpi=90)

#criando o primeiro gráfico
sns.boxplot(data=df,x='fetal_health',y='uterine_contractions',ax=ax[0],palette='Blues',linewidth=0.35)
melhorando_layout(0)
ax[0].set_xlabel('')
ax[0].set_ylabel('uterine_contractions',labelpad=30,fontdict={'fontsize':10},color='#4c4c4c')
ax[0].set_title('Saúde do feto e Contrações Uterinas',loc='left',pad=20,fontdict={'fontsize':15},color='grey')

#criando o segundo gráfico
sns.boxplot(data=df,x='fetal_health',y='abnormal_short_term_variability',ax=ax[1],palette='Purples',linewidth=0.35)
melhorando_layout(1)
ax[1].set_xlabel('')
ax[1].set_ylabel('abnormal_short_term_variability',labelpad=30,fontdict={'fontsize':10},color='#4c4c4c')
ax[1].set_title('Saúde do Feto e Frequência Cardíaca anormal',loc='center',pad=20,fontdict={'fontsize':15},color='grey')

#plotando o gráfico
plt.tight_layout(pad=8.0);

#divindo os dados em treino e validacao
validation = df.sample(frac=0.1,random_state=42)
train = df.drop(validation.index)

#resetando os indices dos dados de treino e validacao
validation.reset_index(inplace=True,drop=True)
train.reset_index(inplace=True,drop=True)

#verificando a separação dos dados
print('Dados de Treino:',train.shape)
print('Dados de Validação:',validation.shape)